package day17;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;


public class CategoryDao {
	
	private final String TBL_CATEGORY = "category";
	private final String COL_IDCATEGORY = "idcategory";
	private final String COL_CATCODE = "catcode";
	private final String COL_CATENAME = "catname";
	
	public void createTableCategory() {
		DataSource ds = new DataSource();
		try {
			Statement statement = ds.getConnection().createStatement();
			statement.execute("CREATE TABLE IF NOT EXISTS public.category (\r\n" + 
					"	idcategory int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,\r\n" + 
					"	catcode varchar(20) NOT NULL,\r\n" +
					"	catname varchar(25) NOT NULL,\r\n" + 
					"	CONSTRAINT category_pk PRIMARY KEY (idcategory)\r\n" + 
					");"+
					"CREATE UNIQUE INDEX IF NOT EXISTS category_catcode_idx ON public.category USING btree (catcode)");
			statement.close();
			ds.closeConnection();
		} catch (SQLException e) {
			System.out.println("Gagal execute "+e.getMessage());
		}
	}
	
	public void insertCategory(Category category) {
		DataSource ds = new DataSource();
		try {
			Statement statement = ds.getConnection().createStatement();
			statement.execute("INSERT INTO "+ TBL_CATEGORY + 
						"(" + COL_CATCODE + "," +
						COL_CATENAME + ") VALUES ( '" +
						category.getCategoryCode() + "', '" +
						category.getCategoryName() + "')" );
			statement.close();
			ds.closeConnection();
		} catch (SQLException e) {
			System.out.println("Input gagal "+e.getMessage());
		}
	}
	
	public Category getCategory(String kodeCat) {
		DataSource ds = new DataSource();
		Category cat = new Category();
		try {
			Statement statement = ds.getConnection().createStatement();
			String query = "SELECT * FROM " + TBL_CATEGORY +
					" WHERE " + COL_CATCODE + " = '" + kodeCat + "'";
			ResultSet result = statement.executeQuery(query);
			while(result.next()) {
				cat.setIdCategory(result.getInt(COL_IDCATEGORY));
				cat.setCategoryCode(result.getString(COL_CATCODE));
				cat.setCategoryName(result.getString(COL_CATENAME));
			}
			statement.close();
			ds.closeConnection();
			return cat;
		} catch (SQLException e) {
			System.out.println("Category not found");
		}
		return null;
	}
	
	public void updateCategory(Category category) {
		DataSource ds = new DataSource();
		try {
			Statement statement = ds.getConnection().createStatement();
			statement.execute("UPDATE " + TBL_CATEGORY +
					" SET " + COL_CATENAME + " = '" + category.getCategoryName() + "'" +
					"," + COL_CATCODE + " = '" + category.getCategoryCode() + "'" +
					" WHERE " + COL_IDCATEGORY + " = " + category.getIdCategory() );
			statement.close();
			ds.closeConnection();
			System.out.println("Data berhasil diubah");
		} catch (SQLException e) {
			System.out.println("Data gagal dimasukan "+e.getMessage());
		}
	}
	
	public void deleteCategory(int idCategory) {
		DataSource ds = new DataSource();
		try {
			Statement statement = ds.getConnection().createStatement();
			statement.execute("DELETE FROM " + TBL_CATEGORY +
					" WHERE " + COL_IDCATEGORY + " = " + idCategory);
			statement.close();
			ds.closeConnection();
			System.out.println("Data berhasil dihapus");
		} catch (SQLException e) {
			System.out.println("Data gagal dihapus "+e.getMessage());
		}
	}
	
	public void displayCategory() {
		DataSource ds = new DataSource();
		try {
			Statement statement = ds.getConnection().createStatement();
			ResultSet result = statement.executeQuery("SELECT * FROM " + TBL_CATEGORY);
			while(result.next()) {
				System.out.println("ID : "+result.getInt(COL_IDCATEGORY));
				System.out.println("Kode Category : "+result.getString(COL_CATCODE));
				System.out.println("Nama Category : "+result.getString(COL_CATENAME));
				System.out.println();
			}
			statement.close();
			ds.closeConnection();
		} catch (SQLException e) {
			System.out.println("Gagal retrieve Category " + e.getMessage());
		}
	}

}
