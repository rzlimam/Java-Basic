package day17;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;



public class ItemDao {
	
		private final String TBL_ITEM = "Items";
		private final String COL_IDITEM = "iditem";
		private final String COL_KODEITEM = "kodeitem";
		private final String COL_NAMAITEM = "namaitem";
		private final String COL_IDCAT = "idcategory";
		private final String COL_AS = "activestate";
		
		//part category
		private final String TBL_CATEGORY = "category";
		private final String COL_IDCATEGORY = "idcategory";
		private final String COL_CATCODE = "catcode";
		private final String COL_CATNAME = "catname";
		
		//part price
		private final String TBL_PRICE = "itemprice";
		private final String COL_IDPRICE = "idprice";
		private final String COL_IDITEMS = "iditem";
		private final String COL_PRICE = "price";
		private final String COL_TGLSTART = "tglstart";
		private final String COL_TGLEND = "tglend";
		
		//part stock
		private final String TBL_STOCK = "itemstock";
		private final String COL_IDITEMSTOCK = "iditem";
		private final String COL_STOCK = "stock";
		private final String COL_DESC = "description";
		private final String COL_TGL = "tgl";
		private final String COL_GETSTOCK = "nowstock";
		
		
		public void createTableItems() {
			DataSource ds = new DataSource();
			try {
				Statement statement = ds.getConnection().createStatement();
				statement.execute("CREATE TABLE public.Items (\r\n" + 
						"	IDITEM int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,\r\n" + 
						"	KODEITEM varchar(10) NOT NULL,\r\n" + 
						"	NAMAITEM varchar(25) NOT NULL,\r\n" + 
						"	idcategory int4 NOT NULL,\r\n" + 
						"	activestate bool NULL,\r\n" + 
						"	CONSTRAINT Items_pk PRIMARY KEY (IDITEM),\r\n" + 
						"	CONSTRAINT Items_un UNIQUE (KODEITEM)\r\n" + 
						");\r\n" + 
						"\r\n" + 
						"ALTER TABLE public.Items ADD CONSTRAINT Items_fk FOREIGN KEY (idcategory) REFERENCES category(idcategory);" );
				statement.close();
				ds.closeConnection();
			} catch (SQLException e) {
				System.out.println("Tabel gagal dibuat "+e.getMessage());
			}
		}
		
		public void createTableItemPrice() {
			DataSource ds = new DataSource();
			try {
				Statement statement = ds.getConnection().createStatement();
				statement.execute("CREATE TABLE IF NOT EXISTS public.ItemPrice (\r\n" + 
						"	idprice int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,\r\n" + 
						"	IDITEM int4 NOT NULL,\r\n" + 
						"	price numeric NOT NULL,\r\n" + 
						"	tglstart date NOT NULL,\r\n" + 
						"	tglend date NULL,\r\n" + 
						"	CONSTRAINT Items_pk PRIMARY KEY (idprice) \r\n" + 
						");\r\n" + 
						"\r\n" + 
						"ALTER TABLE public.ItemPrice ADD CONSTRAINT ItemPrice_fk FOREIGN KEY (IDITEM) REFERENCES Items(IDITEM);" );
				statement.close();
				ds.closeConnection();
			} catch (SQLException e) {
				System.out.println("Tabel gagal dibuat "+e.getMessage());
			}
		}
		
		public void createTableItemStock() {
			DataSource ds = new DataSource();
			try {
				Statement statement = ds.getConnection().createStatement();
				statement.execute("CREATE TABLE IF NOT EXISTS public.ItemStock (\r\n" + 
						"	IDITEM int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,\r\n" + 
						"	stock int4 NOT NULL,\r\n" + 
						"	CONSTRAINT ItemStock_pk PRIMARY KEY (IDITEM) \r\n" + 
						");\r\n" + 
						"\r\n" + 
						"ALTER TABLE public.ItemStock ADD CONSTRAINT ItemStock_fk FOREIGN KEY (IDITEM) REFERENCES Items(IDITEM);" );
				statement.close();
				ds.closeConnection();
			} catch (SQLException e) {
				System.out.println("Tabel gagal dibuat "+e.getMessage());
			}
		}
		
		public void insertItem(Item item) {
			DataSource ds = new DataSource();
			try {
				Statement statement = ds.getConnection().createStatement();
				statement.execute("INSERT INTO "+ TBL_ITEM + 
							"(" + COL_KODEITEM + "," +
							COL_NAMAITEM + "," + 
							COL_IDCATEGORY + "," +
							COL_AS + ") VALUES ( '" +
							item.getKodeItem() + "', '" +
							item.getNamaItem() + "', " +
							item.getIdCategory() + ", '" +
							item.getAs() + "') ");
				
				statement.close();
				ds.closeConnection();
				System.out.println("Item inserted");
			} catch (SQLException e) {
				System.out.println("Input gagal "+e.getMessage());
			}
		}
		
		public Item getItem(String kodeItem) {
			DataSource ds = new DataSource();
			try {
				Statement statement = ds.getConnection().createStatement();
				String query = "SELECT * FROM " + TBL_ITEM +
						" WHERE " + COL_KODEITEM + " = '" + kodeItem + "'";
				ResultSet result = statement.executeQuery(query);
				Item item = null;
				while(result.next()) {
					item = new Item(result.getInt(COL_IDITEM), 
						result.getString(COL_KODEITEM), 
						result.getString(COL_NAMAITEM), 
						result.getInt(COL_IDCATEGORY), 
						result.getString(COL_AS));
				}
				statement.close();
				ds.closeConnection();
				return item;
			} catch (SQLException e) {
				System.out.println("Kode item tidak ada");
			}
			return null;
		}
		
		public void updateItem(Item item) {
			DataSource ds = new DataSource();
			try {
				Statement statement = ds.getConnection().createStatement();
				statement.execute("UPDATE " + TBL_ITEM +
						" SET " + COL_KODEITEM + " = '" + item.getKodeItem() + "' ," + 
						COL_NAMAITEM + " = '" + item.getNamaItem() + "' ," +
						COL_IDCATEGORY + " = '" + item.getIdCategory() + "' ," +
						COL_AS + " = '" + item.getAs() + "'" +
						" WHERE " + COL_IDITEM + " = " + item.getIdItem() );
				statement.close();
				ds.closeConnection();
				System.out.println("Data berhasil diubah");
			} catch (SQLException e) {
				System.out.println("Data gagal dimasukan "+e.getMessage());
			}
		}
		
		public void deleteItem(String kodeItem) {
			DataSource ds = new DataSource();
			try {
				Statement statement = ds.getConnection().createStatement();
				statement.execute("DELETE FROM " + TBL_ITEM +
						" WHERE " + COL_KODEITEM + " = '" + kodeItem + "'");
				statement.close();
				ds.closeConnection();
				System.out.println("Data berhasil dihapus");
			} catch (SQLException e) {
				System.out.println("Data gagal dihapus "+e.getMessage());
			}
		}
		
		public List<Item> getItem() {
			DataSource ds = new DataSource();
			List<Item> item = new ArrayList<Item>();
			try {
				Statement statement = ds.getConnection().createStatement();
				ResultSet result = statement.executeQuery("SELECT * FROM " + TBL_ITEM);
				while(result.next()) {
					item.add(new Item(result.getInt(COL_IDITEM),
							result.getString(COL_KODEITEM),
							result.getString(COL_NAMAITEM),
							result.getInt(COL_IDCATEGORY),
							result.getString(COL_AS)));
				}
				statement.close();
				ds.closeConnection();
				return item;
			} catch (SQLException e) {
				System.out.println("Gagal retrieve Category " + e.getMessage());
			}
			return null;
		}
		
		public void displayItem() {
			DataSource ds = new DataSource();
			System.out.println("Kode\tNama\tCategory\tHarga\tStock");
			System.out.println("--------------------------------------------");
			try {
				Statement statement = ds.getConnection().createStatement();
				ResultSet result = statement.executeQuery("SELECT DISTINCT ON (I." + COL_KODEITEM + ")" + 
								" I.*, CAT.*, PR.*, ST.* FROM " + TBL_ITEM + " AS I " +
								" JOIN " + TBL_CATEGORY + " AS CAT ON CAT." + COL_IDCATEGORY + " = I." + COL_IDCAT +
								" FULL JOIN " + TBL_PRICE + " AS PR ON PR." + COL_IDITEMS + " = I." + COL_IDITEM +
								" FULL JOIN " + TBL_STOCK + " AS ST ON ST." + COL_IDITEMSTOCK + " = I." + COL_IDITEM +
								" WHERE PR." + COL_TGLEND + " is null");
				while(result.next()) {
					System.out.println(result.getString(COL_KODEITEM)+"\t|"+result.getString(COL_NAMAITEM) +
									"\t|"+result.getString(COL_CATNAME)+ "\t|" +result.getInt(COL_PRICE) +
									"\t|" + nowStock(result.getInt(COL_IDITEMSTOCK)));
//					System.out.println("Kode item : "+result.getString(COL_KODEITEM));
//					System.out.println("Nama item : "+result.getString(COL_NAMAITEM));
//					System.out.println("Category : "+result.getString(COL_CATNAME));
//					System.out.println("Active state : "+result.getBoolean(COL_AS));
//					System.out.println("Price : "+result.getInt(COL_PRICE));
//					System.out.println("Stock : "+result.getInt(COL_STOCK));
				}
				
				statement.close();
				ds.closeConnection();
			} catch (SQLException e) {
				System.out.println("Gagal retrieve Category " + e.getMessage());
			}
		}
		
		public void joinTable() {
			DataSource ds =new DataSource();
			try {
				Statement statement = ds.getConnection().createStatement();
				ResultSet result = statement.executeQuery("SELECT KODEITEM, NAMAITEM, category.catname FROM Items"
						+ " JOIN category ON category.idcategory = Items.idcategory");
				while(result.next()) {
					System.out.println("kode : "+result.getString("KODEITEM"));
					System.out.println("nama : "+result.getString("NAMAITEM"));
					System.out.println("category : "+result.getString("catname"));
				}
				statement.close();
				ds.closeConnection();
			} catch (SQLException e) {
				System.out.println("Gagal retrieve Item " + e.getMessage());
			}
		}
		
		public List<Item> searchItem(String searched) {
			DataSource ds =new DataSource();
			List<Item> Item = new ArrayList<Item>();
			try {
				Statement statement = ds.getConnection().createStatement();
				ResultSet result = statement.executeQuery("SELECT b.*, ct.catcode, ct.catname FROM " + TBL_ITEM + " AS b" +
						" JOIN " + TBL_CATEGORY + " AS ct ON " + "b.idcategory = ct.idcategory " +
						" WHERE " + COL_NAMAITEM + " LIKE '%" + searched + "%'");
				while(result.next()) {
					Item item = new Item(result.getInt(COL_IDITEM), 
							result.getString(COL_KODEITEM), 
							result.getString(COL_NAMAITEM), 
							result.getInt(COL_IDCAT), 
							result.getString(COL_AS));
					item.setCategory(result.getInt(COL_IDCAT),
							result.getString(COL_CATCODE), 
							result.getString(COL_CATNAME));
					Item.add(item);
				}
				if(Item.isEmpty())
					System.out.println("Item tidak ditemukan");
				statement.close();
				ds.closeConnection();
				return Item;
			} catch (SQLException e) {
				System.out.println("Gagal Search Item "+e.getMessage());
			}
			return null;
		}
		
		public List<Item> searchItemByCategory(int categoryId) {
			DataSource ds =new DataSource();
			List<Item> Item = new ArrayList<Item>();
			try {
				Statement statement = ds.getConnection().createStatement();
				ResultSet result = statement.executeQuery("SELECT b.*, ct.catcode, ct.catname FROM " + TBL_ITEM + " AS b" +
						" JOIN " + TBL_CATEGORY + " AS ct ON " +  
						"b.idcategory = ct.idcategory " +
						" WHERE b.idcategory = " + categoryId);
				while(result.next()) {
					Item item = new Item(result.getInt(COL_IDITEM), 
							result.getString(COL_KODEITEM), 
							result.getString(COL_NAMAITEM), 
							result.getInt(COL_IDCAT), 
							result.getString(COL_AS));
					item.setCategory(result.getInt(COL_IDCAT),
							result.getString(COL_CATCODE), 
							result.getString(COL_CATNAME));
					Item.add(item);
				}
				if(Item.isEmpty())
					System.out.println("Item tidak ditemukan");
				statement.close();
				ds.closeConnection();
				return Item;
			} catch (SQLException e) {
				System.out.println("Gagal Search Item "+e.getMessage());
			}
			return null;
		}
		
		public List<Item> searchItemByCategory(String catName) {
			DataSource ds =new DataSource();
			List<Item> Item = new ArrayList<Item>();
			try {
				Statement statement = ds.getConnection().createStatement();
				ResultSet result = statement.executeQuery("SELECT b.*, ct.catcode, ct.catname FROM " + TBL_ITEM + " AS b" +
						" JOIN " + TBL_CATEGORY + " AS ct ON " +  
						"b.idcategory = ct.idcategory " +
						" WHERE ct.catName LIKE '%" + catName + "%'");
				while(result.next()) {
					Item item = new Item(result.getInt(COL_IDITEM), 
							result.getString(COL_KODEITEM), 
							result.getString(COL_NAMAITEM), 
							result.getInt(COL_IDCAT), 
							result.getString(COL_AS));
					item.setCategory(result.getInt(COL_IDCAT),
							result.getString(COL_CATCODE), 
							result.getString(COL_CATNAME));
					Item.add(item);
				}
				if(Item.isEmpty())
					System.out.println("Item tidak ditemukan");
				statement.close();
				ds.closeConnection();
				return Item;
			} catch (SQLException e) {
				System.out.println("Gagal Search Item "+e.getMessage());
			}
			return null;
		}
		
		public void insertPrice(Price price) {
			DataSource ds =new DataSource();
			try {
				Statement statement = ds.getConnection().createStatement();
				String query = "INSERT INTO " + TBL_PRICE +
						"(" + COL_IDITEMS + "," +
						COL_PRICE + "," +
						COL_TGLSTART + ") VALUES (" +
						price.getIdItem() + ", " +
						price.getPrice() + ", '" +
						price.getTglStart() + "')";
				statement.execute(query);
				statement.close();
				ds.closeConnection();
				System.out.println("Insert success");
			} catch(SQLException e) {
				System.out.println("Insert gagal "+e.getMessage());
			}
		}
		
		public Price getPrice(int idItem) {
			DataSource ds =new DataSource();
			Price pr = new Price();
			try {
				Statement statement = ds.getConnection().createStatement();
				ResultSet result = statement.executeQuery("SELECT * FROM " + TBL_PRICE +
						" WHERE " + COL_IDITEMS + " = " + idItem +
						" AND " + COL_TGLEND + " is null");
				while(result.next()) {
					pr.setIdPrice(result.getInt(COL_IDPRICE));
					pr.setIdItem(result.getInt(COL_IDITEMS));
					pr.setPrice(result.getInt(COL_PRICE));
					pr.setTglStart(result.getString(COL_TGLSTART));
					pr.setTglEnd(result.getString(COL_TGLEND));
					statement.close();
					ds.closeConnection();
					return pr;
				}
				statement.close();
				ds.closeConnection();
			} catch(SQLException e) {
				System.out.println(e.getMessage());
			}
			return null;
		}
		
		public void updatePrice(Price price) {
			DataSource ds =new DataSource();
			try {
				Statement statement = ds.getConnection().createStatement();
				String query = "UPDATE " + TBL_PRICE +
						" SET " + COL_IDITEMS + " = " + price.getIdItem() + "," +
						COL_PRICE + " = " + price.getPrice() + "," +
						COL_TGLSTART + " = '" + price.getTglStart() + "'," +
						COL_TGLEND + " = '" + price.getTglEnd() + "'" +
						" WHERE " + COL_IDPRICE + " = " + price.getIdPrice();
				statement.execute(query);
				statement.close();
				ds.closeConnection();
				System.out.println("Insert success");
			} catch(SQLException e) {
				System.out.println("Insert gagal "+e.getMessage());
			}
		}
		
		public Stock getStock(int idItem) {
			DataSource ds =new DataSource();
			Stock st = new Stock();
			try {
				Statement statement = ds.getConnection().createStatement();
				ResultSet result = statement.executeQuery("SELECT * FROM " + TBL_STOCK +
						" WHERE " + COL_IDITEMSTOCK + " = " + idItem);
				while(result.next()) {
					st.setIdItem(result.getInt(COL_IDITEMSTOCK));
					st.setStock(result.getInt(COL_STOCK));
				}
				statement.close();
				ds.closeConnection();
				return st;
			} catch(SQLException e) {
				System.out.println(e.getMessage());
			}
			return null;
		}
		
		public void insertStock(Stock stock) {
			DataSource ds =new DataSource();
			try {
				Statement statement = ds.getConnection().createStatement();
				String query = "INSERT INTO " + TBL_STOCK +
						"(" + COL_IDITEMSTOCK + "," +
						COL_STOCK + "," + COL_DESC + "," +
						COL_TGL + ") VALUES (" + stock.getIdItem() + "," +
						stock.getStock() + ", '" +
						stock.getDesc() + "', '" +
						stock.getTgl() + "')";
				statement.execute(query);
				statement.close();
				ds.closeConnection();
				System.out.println("Insert sukse");
			} catch(SQLException e) {
				System.out.println(e.getMessage());
			}
		}
		
		public void updateStock(Stock stock) {
			DataSource ds =new DataSource();
			try {
				Statement statement = ds.getConnection().createStatement();
				String query = "UPDATE " + TBL_STOCK +
						" SET " + COL_STOCK + " = " + stock.getStock() +
						" WHERE " + COL_IDITEMSTOCK + " = " + stock.getIdItem();
				statement.execute(query);
				statement.close();
				ds.closeConnection();
			} catch(SQLException e) {
				System.out.println(e.getMessage());
			}
		}
		
		public int nowStock(int idItem) {
			DataSource ds =new DataSource();
			int stockNow = 0;
			try {
				Statement statement = ds.getConnection().createStatement();
				String query = "SELECT SUM(" + COL_STOCK + ") AS " +
						COL_GETSTOCK + " FROM " +TBL_STOCK +
						" WHERE " + COL_IDITEMSTOCK + " = " + idItem +
						" GROUP BY " + COL_IDITEMSTOCK;
				ResultSet result = statement.executeQuery(query);
				while(result.next()) {
					stockNow = result.getInt(COL_GETSTOCK);
				}
				statement.close();
				ds.closeConnection();
				return stockNow;
			} catch (SQLException e) {
				System.out.println(e.getMessage());
			}
			return 0;
		}
		
		public void displayStock() {
			DataSource ds =new DataSource();
			System.out.println("Item\tStock\tDesc\tTanggal");
			System.out.println("---------------------------------------------------------");
			try {
				Statement statement = ds.getConnection().createStatement();
				String query = "SELECT IT." + COL_NAMAITEM + "," + COL_STOCK + "," + 
						COL_DESC + "," + COL_TGL +
						" FROM " + TBL_STOCK + " AS ST " +
						" JOIN " + TBL_ITEM + " AS IT ON IT." + COL_IDITEM + " = ST." + COL_IDITEMSTOCK;
				ResultSet result = statement.executeQuery(query);
				while(result.next()) {
					System.out.println(result.getString(COL_NAMAITEM)+"\t"+result.getInt(COL_STOCK) +
							"\t"+result.getString(COL_DESC)+"\t"+result.getString(COL_TGL));
				}
				statement.close();
				ds.closeConnection();
			} catch (SQLException e) {
				System.out.println(e.getMessage());
			}
		}
		


}
